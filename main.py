import telebot
from telebot import types
import pendulum
import requests
from bs4 import BeautifulSoup as bs
import time

# -= –¢–æ–∫–µ–Ω –±–æ—Ç–∞ =- #

bot = telebot.TeleBot('6440852245:AAE6CiE5QkugkNk2VHKlybHezUx2jdfkg-w')

# -= –°—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—Ç–∞ =- #

@bot.message_handler(commands = ['start'])
def start(message):
    global users
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_homeworks = types.KeyboardButton("üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
    #btn_controlworks = types.KeyboardButton("‚úçÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
    #btn_topics = types.KeyboardButton("üìù –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤")
    markup.add(btn_homeworks)
    bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å?\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n1) üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n2) ‚úçÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", reply_markup=markup)
    if message.from_user.id not in users:
        users += [message.from_user.id]
        print(users)

def four_zero_four(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    markup.add(btn_back)
    bot.send_message(message.from_user.id, "–£–ø—Å... –ü–æ—Ö–æ–¥—É —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å üòî", reply_markup=markup)

def select_data_homeworks(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_homeworksfortomorrow = types.KeyboardButton("üìÜ –ù–∞ –∑–∞–≤—Ç—Ä–∞")
    btn_allactivehomeworks = types.KeyboardButton("üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ")
    btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    markup.add(btn_homeworksfortomorrow, btn_allactivehomeworks, btn_back)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –î–ó –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å ( üìÜ –ù–∞ –∑–∞–≤—Ç—Ä–∞ / üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ )", reply_markup=markup)

def homework_for_tomorrow(message):
    update_homeworks_for_tomorrow()
    if len(data['homeworks_for_tomorrow']) == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(btn_back)
        bot.send_message(message.from_user.id, "–£—Ä–∞! –î–æ–º–∞—à–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üòä", reply_markup=markup)
    else:
        markupInline = types.InlineKeyboardMarkup()
        for vhomework in data['homeworks_for_tomorrow']:
            btn_In_Temp = types.InlineKeyboardButton(text=vhomework[0], url=vhomework[1])
            markupInline.add(btn_In_Temp)
        bot.send_message(message.from_user.id, "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:", reply_markup=markupInline)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(btn_back)
        bot.send_message(message.from_user.id, "–î—Ä—É–≥–∏–µ –î–ó —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ ikbo2123.ru", reply_markup=markup)

def active_homeworks(message):
    update_active_homeworks()
    if len(data['active_homeworks']) == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(btn_back)
        bot.send_message(message.from_user.id, "–£—Ä–∞! –î–æ–º–∞—à–µ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç üòä", reply_markup=markup)
    else:
        markupInline = types.InlineKeyboardMarkup(row_width=len(data['active_homeworks']))
        for vhomework in data['active_homeworks']:
            btn_In_Temp = types.InlineKeyboardButton(text=vhomework[0], url=vhomework[1])
            markupInline.add(btn_In_Temp)
        bot.send_message(message.from_user.id, "üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=markupInline)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        markup.add(btn_back)
        bot.send_message(message.from_user.id, "–û—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –Ω–∞–π–¥—ë—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ ikbo2123.ru", reply_markup=markup)

# def controlworks(message):
#     update_controlworks()
#     if len(data['controlworks']) == 0:
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#         btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
#         markup.add(btn_back)
#         bot.send_message(message.from_user.id, "–£—Ä–∞! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç üòä", reply_markup=markup)
#     else:
#         markupInline = types.InlineKeyboardMarkup(row_width=len(data['controlworks']))
#         for controlwork in data['controlworks']:
#             btn_In_Temp = types.InlineKeyboardButton(text=controlwork[0], url=controlwork[1])
#             markupInline.add(btn_In_Temp)
#         bot.send_message(message.from_user.id, "‚úçÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=markupInline)
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#         btn_back = types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
#         markup.add(btn_back)
#         bot.send_message(message.from_user.id, "–û—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ ikbo2123.ru", reply_markup=markup)

# -= –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ =- #

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    match message.text:
        case "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è":
            select_data_homeworks(message)
        case "üìÜ –ù–∞ –∑–∞–≤—Ç—Ä–∞":
            homework_for_tomorrow(message)
        case "üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ":
            active_homeworks(message)
        #case "‚úçÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
            #controlworks(message)
        #case "üìù –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤":
            pass
        case "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
            start(message)
        case _:
            four_zero_four(message)

# -= Data Update =- #

def update_homeworks_for_tomorrow():
    global data
    data['homeworks_for_tomorrow'].clear()
    tomorrow = list(int(i) for i in pendulum.tomorrow("Europe/Moscow").format('DD.MM.YYYY').split('.'))
    tomorrow_alternative = list(int(i) for i in pendulum.tomorrow("Europe/Moscow").format('DD.MM.YY').split('.'))
    URL_TEMPLATE = "https://ikbo2123.ru/category/general/homeworks/"
    r = requests.get(URL_TEMPLATE)
    soup = bs(r.text, "html.parser")
    homeworks = soup.find_all('h2', class_='wp-block-post-title')
    for homework in homeworks:
        try:
            tempdata = list(int(i) for i in homework.text[-10:].split('.'))
            if tomorrow[2] == tempdata[2] and tomorrow[1] == tempdata[1] and tomorrow[0] == tempdata[0]:
                data['homeworks_for_tomorrow'] += [[homework.text, homework.a['href']]]
        except:
            try:
                tempdata = list(int(i) for i in homework.text[-8:].split('.'))
                if tomorrow_alternative[2] == tempdata[2] and tomorrow_alternative[1] == tempdata[1] and \
                        tomorrow_alternative[0] == tempdata[0]:
                    data['homeworks_for_tomorrow'] += [[homework.text, homework.a['href']]]
            except:
                continue

def update_active_homeworks():
    global data
    data['active_homeworks'].clear()
    tomorrow = list(int(i) for i in pendulum.tomorrow("Europe/Moscow").format('DD.MM.YYYY').split('.'))
    tomorrow_alternative = list(int(i) for i in pendulum.tomorrow("Europe/Moscow").format('DD.MM.YY').split('.'))
    URL_TEMPLATE = "https://ikbo2123.ru/category/general/homeworks/"
    r = requests.get(URL_TEMPLATE)
    soup = bs(r.text, "html.parser")
    homeworks = soup.find_all('h2', class_='wp-block-post-title')
    for homework in homeworks:
        try:
            tempdata = list(int(i) for i in homework.text[-10:].split('.'))
            if (tomorrow[2] < tempdata[2]) or (tomorrow[2] == tempdata[2] and tomorrow[1] < tempdata[1]) or (
                    tomorrow[2] == tempdata[2] and tomorrow[1] == tempdata[1] and tomorrow[0] <= tempdata[0]):
                data['active_homeworks'] += [[homework.text, homework.a['href']]]
        except:
            try:
                tempdata = list(int(i) for i in homework.text[-8:].split('.'))
                if (tomorrow_alternative[2] < tempdata[2]) or (
                        tomorrow_alternative[2] == tempdata[2] and tomorrow_alternative[1] < tempdata[1]) or (
                        tomorrow_alternative[2] == tempdata[2] and tomorrow_alternative[1] == tempdata[1] and
                        tomorrow_alternative[0] <= tempdata[0]):
                    data['active_homeworks'] += [[homework.text, homework.a['href']]]
            except:
                continue

def update_controlworks():
    global data
    data['controlworks'].clear()
    today = list(int(i) for i in pendulum.today("Europe/Moscow").format('DD.MM.YYYY').split('.'))
    today_alternative = list(int(i) for i in pendulum.today("Europe/Moscow").format('DD.MM.YY').split('.'))
    URL_TEMPLATE = "https://ikbo2123.ru/category/general/controlworks/"
    r = requests.get(URL_TEMPLATE)
    soup = bs(r.text, "html.parser")
    controlworks = soup.find_all('h2', class_='wp-block-post-title')
    for controlwork in controlworks:
        try:
            tempdata = list(int(i) for i in controlwork.text[-10:].split('.'))
            if (today[2] < tempdata[2]) or (today[2] == tempdata[2] and today[1] < tempdata[1]) or (
                    today[2] == tempdata[2] and today[1] == tempdata[1] and today[0] <= tempdata[0]):
                data['controlworks'] += [[controlwork.text, controlwork.a['href']]]
        except:
            try:
                tempdata = list(int(i) for i in controlwork.text[-8:].split('.'))
                if (today_alternative[2] < tempdata[2]) or (
                        today_alternative[2] == tempdata[2] and today_alternative[1] < tempdata[1]) or (
                        today_alternative[2] == tempdata[2] and today_alternative[1] == tempdata[1] and
                        today_alternative[0] <= tempdata[0]):
                    data['controlworks'] += [[controlwork.text, controlwork.a['href']]]
            except:
                continue

# -= Start bot  =- #
users = []
startbot = True
data = {
    'homeworks_for_tomorrow': [],
    'active_homeworks': [],
    'controlworks': [],
    'lasttimeupdate': time.time(),
}
bot.polling(non_stop=True)